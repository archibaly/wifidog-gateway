!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACLOCAL	Makefile	/^ACLOCAL = ${SHELL} \/home\/jacky\/mt7620\/package\/pronetway\/wifidog-gateway-1.3.0\/config\/missing aclocal-1.14$/;"	m
ACLOCAL_M4	Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
AMTAR	Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AM_CPPFLAGS	Makefile	/^AM_CPPFLAGS = \\$/;"	m
AM_DEFAULT_VERBOSITY	Makefile	/^AM_DEFAULT_VERBOSITY = 1$/;"	m
AM_V_AR	Makefile	/^AM_V_AR = $(am__v_AR_$(V))$/;"	m
AM_V_CC	Makefile	/^AM_V_CC = $(am__v_CC_$(V))$/;"	m
AM_V_CCLD	Makefile	/^AM_V_CCLD = $(am__v_CCLD_$(V))$/;"	m
AM_V_GEN	Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_P	Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_at	Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_lt	Makefile	/^AM_V_lt = $(am__v_lt_$(V))$/;"	m
AR	Makefile	/^AR = mipsel-openwrt-linux-ar$/;"	m
ARFLAGS	Makefile	/^ARFLAGS = cru$/;"	m
AUTH_ALLOWED	auth.h	/^    AUTH_ALLOWED = 1, \/**< Client was granted access by the auth server *\/$/;"	e	enum:__anon1
AUTH_DENIED	auth.h	/^    AUTH_DENIED = 0, \/**< Client was denied by the auth server *\/$/;"	e	enum:__anon1
AUTH_ERROR	auth.h	/^    AUTH_ERROR = -1, \/**< An error occured during the validation process*\/$/;"	e	enum:__anon1
AUTH_LOCKED	auth.h	/^    AUTH_LOCKED = 254 \/**< Account has been locked *\/$/;"	e	enum:__anon1
AUTH_VALIDATION	auth.h	/^    AUTH_VALIDATION = 5, \/**< A misnomer.  Client is in 15 min probation to validate his new account *\/$/;"	e	enum:__anon1
AUTH_VALIDATION_FAILED	auth.h	/^    AUTH_VALIDATION_FAILED = 6, \/**< Client had X minutes to validate account by email and didn't = too late *\/$/;"	e	enum:__anon1
AUTOCONF	Makefile	/^AUTOCONF = ${SHELL} \/home\/jacky\/mt7620\/package\/pronetway\/wifidog-gateway-1.3.0\/config\/missing autoconf$/;"	m
AUTOHEADER	Makefile	/^AUTOHEADER = ${SHELL} \/home\/jacky\/mt7620\/package\/pronetway\/wifidog-gateway-1.3.0\/config\/missing autoheader$/;"	m
AUTOMAKE	Makefile	/^AUTOMAKE = ${SHELL} \/home\/jacky\/mt7620\/package\/pronetway\/wifidog-gateway-1.3.0\/config\/missing automake-1.14$/;"	m
AWK	Makefile	/^AWK = gawk$/;"	m
BUILDROOT	Makefile	/^BUILDROOT = $/;"	m
CC	Makefile	/^CC = mipsel-openwrt-linux-gcc$/;"	m
CCDEPMODE	Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCLD	Makefile	/^CCLD = $(CC)$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g -O2$/;"	m
CHAIN_AUTHSERVERS	fw_iptables.h	39;"	d
CHAIN_AUTH_IS_DOWN	fw_iptables.h	46;"	d
CHAIN_GLOBAL	fw_iptables.h	40;"	d
CHAIN_INCOMING	fw_iptables.h	38;"	d
CHAIN_KNOWN	fw_iptables.h	42;"	d
CHAIN_LOCKED	fw_iptables.h	44;"	d
CHAIN_OUTGOING	fw_iptables.h	35;"	d
CHAIN_TO_INTERNET	fw_iptables.h	36;"	d
CHAIN_TO_ROUTER	fw_iptables.h	37;"	d
CHAIN_TRUSTED	fw_iptables.h	45;"	d
CHAIN_UNKNOWN	fw_iptables.h	43;"	d
CHAIN_VALIDATE	fw_iptables.h	41;"	d
COMPILE	Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
CONFIG_CLEAN_FILES	Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_HEADER	Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CPP	Makefile	/^CPP = mipsel-openwrt-linux-gcc -E$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS = $/;"	m
CTAGS	Makefile	/^CTAGS = ctags$/;"	m
CXX	Makefile	/^CXX = mipsel-openwrt-linux-g++$/;"	m
CXXCPP	Makefile	/^CXXCPP = mipsel-openwrt-linux-g++ -E$/;"	m
CXXDEPMODE	Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -g -O2$/;"	m
CYGPATH_W	Makefile	/^CYGPATH_W = echo$/;"	m
DECLTYPE	uthash.h	38;"	d
DECLTYPE	uthash.h	41;"	d
DECLTYPE	uthash.h	45;"	d
DECLTYPE	uthash.h	47;"	d
DECLTYPE_ASSIGN	uthash.h	51;"	d
DECLTYPE_ASSIGN	uthash.h	57;"	d
DEFAULT_ARPTABLE	conf.h	64;"	d
DEFAULT_AUTHSERVAUTHPATHFRAGMENT	conf.h	59;"	d
DEFAULT_AUTHSERVLOGINPATHFRAGMENT	conf.h	55;"	d
DEFAULT_AUTHSERVMSGPATHFRAGMENT	conf.h	57;"	d
DEFAULT_AUTHSERVPATH	conf.h	54;"	d
DEFAULT_AUTHSERVPINGPATHFRAGMENT	conf.h	58;"	d
DEFAULT_AUTHSERVPORT	conf.h	49;"	d
DEFAULT_AUTHSERVPORTALPATHFRAGMENT	conf.h	56;"	d
DEFAULT_AUTHSERVSSLAVAILABLE	conf.h	52;"	d
DEFAULT_AUTHSERVSSLCERTPATH	conf.h	60;"	d
DEFAULT_AUTHSERVSSLPEERVER	conf.h	62;"	d
DEFAULT_AUTHSERVSSLPORT	conf.h	50;"	d
DEFAULT_AUTHSERVSSLSNI	conf.h	65;"	d
DEFAULT_CHECKINTERVAL	conf.h	44;"	d
DEFAULT_CLIENTTIMEOUT	conf.h	43;"	d
DEFAULT_CONFIGFILE	conf.h	35;"	d
DEFAULT_DAEMON	conf.h	37;"	d
DEFAULT_DEBUGLEVEL	conf.h	38;"	d
DEFAULT_DELTATRAFFIC	conf.h	63;"	d
DEFAULT_GATEWAYID	conf.h	40;"	d
DEFAULT_GATEWAYPORT	conf.h	41;"	d
DEFAULT_HTMLMSGFILE	conf.h	36;"	d
DEFAULT_HTTPDMAXCONN	conf.h	39;"	d
DEFAULT_HTTPDNAME	conf.h	42;"	d
DEFAULT_INCLUDES	Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)$/;"	m
DEFAULT_INTERNAL_SOCK	conf.h	48;"	d
DEFAULT_LOG_SYSLOG	conf.h	45;"	d
DEFAULT_SOCK	wdctl.h	30;"	d
DEFAULT_SYSLOG_FACILITY	conf.h	46;"	d
DEFAULT_WDCTL_SOCK	conf.h	47;"	d
DEFAULT_WDCTL_SOCK	wdctl_thread.h	30;"	d
DEFS	Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	Makefile	/^DEPDIR = .deps$/;"	m
DISTFILES	Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_COMMON	Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.in $(srcdir)\/Makefile.am \\$/;"	m
DIST_SOURCES	Makefile	/^DIST_SOURCES = $(libgateway_a_SOURCES) $(wdctl_SOURCES) \\$/;"	m
DLLTOOL	Makefile	/^DLLTOOL = false$/;"	m
DOT	Makefile	/^DOT = $/;"	m
DOXYGEN	Makefile	/^DOXYGEN = $/;"	m
DSYMUTIL	Makefile	/^DSYMUTIL = $/;"	m
DUMPBIN	Makefile	/^DUMPBIN = $/;"	m
ECHO_C	Makefile	/^ECHO_C = $/;"	m
ECHO_N	Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	Makefile	/^ECHO_T = $/;"	m
EGREP	Makefile	/^EGREP = \/bin\/grep -E$/;"	m
ELMT_FROM_HH	uthash.h	105;"	d
ETAGS	Makefile	/^ETAGS = etags$/;"	m
EXEEXT	Makefile	/^EXEEXT = $/;"	m
EXT_INTERFACE_DETECT_RETRY_INTERVAL	util.h	35;"	d
FGREP	Makefile	/^FGREP = \/bin\/grep -F$/;"	m
FWRULESET_AUTH_IS_DOWN	conf.h	73;"	d
FWRULESET_GLOBAL	conf.h	70;"	d
FWRULESET_KNOWN_USERS	conf.h	72;"	d
FWRULESET_LOCKED_USERS	conf.h	75;"	d
FWRULESET_UNKNOWN_USERS	conf.h	74;"	d
FWRULESET_VALIDATING_USERS	conf.h	71;"	d
FW_ACCESS_ALLOW	fw_iptables.h	/^    FW_ACCESS_ALLOW,$/;"	e	enum:fw_access_t_
FW_ACCESS_DENY	fw_iptables.h	/^    FW_ACCESS_DENY$/;"	e	enum:fw_access_t_
FW_MARK_AUTH_IS_DOWN	firewall.h	/^    FW_MARK_AUTH_IS_DOWN = 253, \/**< @brief The auth servers are down *\/$/;"	e	enum:_t_fw_marks
FW_MARK_KNOWN	firewall.h	/^    FW_MARK_KNOWN = 2,          \/**< @brief The client is known to the firewall *\/$/;"	e	enum:_t_fw_marks
FW_MARK_LOCKED	firewall.h	/^    FW_MARK_LOCKED = 254        \/**< @brief The client has been locked out *\/$/;"	e	enum:_t_fw_marks
FW_MARK_NONE	firewall.h	/^    FW_MARK_NONE = 0,           \/**< @brief No mark set. *\/$/;"	e	enum:_t_fw_marks
FW_MARK_PROBATION	firewall.h	/^    FW_MARK_PROBATION = 1,      \/**< @brief The client is in probation period and must be authenticated$/;"	e	enum:_t_fw_marks
GATEWAY_MESSAGE_ACCOUNT_LOGGED_OUT	centralserver.h	47;"	d
GATEWAY_MESSAGE_ACCOUNT_VALIDATION_FAILED	centralserver.h	45;"	d
GATEWAY_MESSAGE_ACTIVATE_ACCOUNT	centralserver.h	43;"	d
GATEWAY_MESSAGE_DENIED	centralserver.h	41;"	d
GREP	Makefile	/^GREP = \/bin\/grep$/;"	m
HASH_ADD	uthash.h	173;"	d
HASH_ADD_INT	uthash.h	272;"	d
HASH_ADD_KEYPTR	uthash.h	186;"	d
HASH_ADD_PTR	uthash.h	278;"	d
HASH_ADD_STR	uthash.h	266;"	d
HASH_ADD_TO_BKT	uthash.h	629;"	d
HASH_BER	uthash.h	368;"	d
HASH_BKT_CAPACITY_THRESH	uthash.h	102;"	d
HASH_BLOOM_ADD	uthash.h	140;"	d
HASH_BLOOM_ADD	uthash.h	149;"	d
HASH_BLOOM_BITLEN	uthash.h	121;"	d
HASH_BLOOM_BITSET	uthash.h	137;"	d
HASH_BLOOM_BITTEST	uthash.h	138;"	d
HASH_BLOOM_BYTELEN	uthash.h	122;"	d
HASH_BLOOM_BYTELEN	uthash.h	151;"	d
HASH_BLOOM_FREE	uthash.h	132;"	d
HASH_BLOOM_FREE	uthash.h	148;"	d
HASH_BLOOM_MAKE	uthash.h	123;"	d
HASH_BLOOM_MAKE	uthash.h	147;"	d
HASH_BLOOM_SIGNATURE	uthash.h	920;"	d
HASH_BLOOM_TEST	uthash.h	143;"	d
HASH_BLOOM_TEST	uthash.h	150;"	d
HASH_CLEAR	uthash.h	867;"	d
HASH_CNT	uthash.h	897;"	d
HASH_COUNT	uthash.h	896;"	d
HASH_DEL	uthash.h	282;"	d
HASH_DELETE	uthash.h	228;"	d
HASH_DEL_IN_BKT	uthash.h	643;"	d
HASH_EMIT_KEY	uthash.h	350;"	d
HASH_EMIT_KEY	uthash.h	357;"	d
HASH_EXPAND_BUCKETS	uthash.h	683;"	d
HASH_FCN	uthash.h	362;"	d
HASH_FCN	uthash.h	364;"	d
HASH_FIND	uthash.h	107;"	d
HASH_FIND_INT	uthash.h	270;"	d
HASH_FIND_IN_BKT	uthash.h	615;"	d
HASH_FIND_PTR	uthash.h	276;"	d
HASH_FIND_STR	uthash.h	264;"	d
HASH_FNV	uthash.h	393;"	d
HASH_FSCK	uthash.h	290;"	d
HASH_FSCK	uthash.h	342;"	d
HASH_INITIAL_NUM_BUCKETS	uthash.h	100;"	d
HASH_INITIAL_NUM_BUCKETS_LOG2	uthash.h	101;"	d
HASH_ITER	uthash.h	886;"	d
HASH_ITER	uthash.h	890;"	d
HASH_JEN	uthash.h	434;"	d
HASH_JEN_MIX	uthash.h	421;"	d
HASH_KEYCMP	uthash.h	612;"	d
HASH_MAKE_TABLE	uthash.h	154;"	d
HASH_MUR	uthash.h	572;"	d
HASH_OAT	uthash.h	405;"	d
HASH_OOPS	uthash.h	289;"	d
HASH_OVERHEAD	uthash.h	878;"	d
HASH_REPLACE	uthash.h	176;"	d
HASH_REPLACE_INT	uthash.h	274;"	d
HASH_REPLACE_PTR	uthash.h	280;"	d
HASH_REPLACE_STR	uthash.h	268;"	d
HASH_SAX	uthash.h	382;"	d
HASH_SELECT	uthash.h	829;"	d
HASH_SFH	uthash.h	486;"	d
HASH_SIGNATURE	uthash.h	919;"	d
HASH_SORT	uthash.h	735;"	d
HASH_SRT	uthash.h	736;"	d
HASH_TO_BKT	uthash.h	211;"	d
HEADERS	Makefile	/^HEADERS = $(noinst_HEADERS)$/;"	m
INSTALL	Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
ISSPACE	str.h	4;"	d
LD	Makefile	/^LD = \/home\/jacky\/mt7620\/staging_dir\/toolchain-mipsel_24kec+dsp_gcc-4.8-linaro_uClibc-0.9.33.2\/mipsel-openwrt-linux-uclibc\/bin\/ld$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = $/;"	m
LIBOBJS	Makefile	/^LIBOBJS = $/;"	m
LIBRARIES	Makefile	/^LIBRARIES = $(noinst_LIBRARIES)$/;"	m
LIBS	Makefile	/^LIBS = -lnsl -lpthread $/;"	m
LIBTOOL	Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LINK	Makefile	/^LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LIPO	Makefile	/^LIPO = $/;"	m
LN_S	Makefile	/^LN_S = ln -s$/;"	m
LOCK_CLIENT_LIST	client_list.h	113;"	d
LOCK_CONFIG	conf.h	233;"	d
LOCK_CYASSL_CTX	simple_http.c	141;"	d	file:
LOCK_GHBN	util.c	63;"	d	file:
LTCOMPILE	Makefile	/^LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LTLIBOBJS	Makefile	/^LTLIBOBJS = $/;"	m
MAINT	Makefile	/^MAINT = $/;"	m
MAKEINFO	Makefile	/^MAKEINFO = ${SHELL} \/home\/jacky\/mt7620\/package\/pronetway\/wifidog-gateway-1.3.0\/config\/missing makeinfo$/;"	m
MANIFEST_TOOL	Makefile	/^MANIFEST_TOOL = :$/;"	m
MAX_BUF	common.h	31;"	d
MAX_CLIENTS	common.h	33;"	d
MINIMUM_STARTED_TIME	ping_thread.h	31;"	d
MKDIR_P	Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MUR_FMIX	uthash.h	563;"	d
MUR_GETBLOCK	uthash.h	541;"	d
MUR_GETBLOCK	uthash.h	557;"	d
MUR_ONE_THREE	uthash.h	551;"	d
MUR_ONE_THREE	uthash.h	555;"	d
MUR_PLUS0_ALIGNED	uthash.h	543;"	d
MUR_PLUS1_ALIGNED	uthash.h	544;"	d
MUR_PLUS2_ALIGNED	uthash.h	545;"	d
MUR_PLUS3_ALIGNED	uthash.h	546;"	d
MUR_ROTL32	uthash.h	562;"	d
MUR_THREE_ONE	uthash.h	549;"	d
MUR_THREE_ONE	uthash.h	553;"	d
MUR_TWO_TWO	uthash.h	550;"	d
MUR_TWO_TWO	uthash.h	554;"	d
NM	Makefile	/^NM = \/home\/jacky\/mt7620\/staging_dir\/toolchain-mipsel_24kec+dsp_gcc-4.8-linaro_uClibc-0.9.33.2\/bin\/mipsel-openwrt-linux-nm -B$/;"	m
NMEDIT	Makefile	/^NMEDIT = $/;"	m
NORMAL_INSTALL	Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NO_DECLTYPE	uthash.h	40;"	d
NO_DECLTYPE	uthash.h	44;"	d
NUM_EXT_INTERFACE_DETECT_RETRY	util.h	32;"	d
OBJDUMP	Makefile	/^OBJDUMP = mipsel-openwrt-linux-objdump$/;"	m
OBJEXT	Makefile	/^OBJEXT = o$/;"	m
OTOOL	Makefile	/^OTOOL = $/;"	m
OTOOL64	Makefile	/^OTOOL64 = $/;"	m
OpCodes	conf.c	/^} OpCodes;$/;"	t	typeref:enum:__anon2	file:
PACKAGE	Makefile	/^PACKAGE = wifidog$/;"	m
PACKAGE_BUGREPORT	Makefile	/^PACKAGE_BUGREPORT = $/;"	m
PACKAGE_NAME	Makefile	/^PACKAGE_NAME = $/;"	m
PACKAGE_STRING	Makefile	/^PACKAGE_STRING = $/;"	m
PACKAGE_TARNAME	Makefile	/^PACKAGE_TARNAME = $/;"	m
PACKAGE_URL	Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_VERSION	Makefile	/^PACKAGE_VERSION = $/;"	m
PATH_SEPARATOR	Makefile	/^PATH_SEPARATOR = :$/;"	m
POST_INSTALL	Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	Makefile	/^POST_UNINSTALL = :$/;"	m
PRE_INSTALL	Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	Makefile	/^PRE_UNINSTALL = :$/;"	m
PROGRAMS	Makefile	/^PROGRAMS = $(bin_PROGRAMS)$/;"	m
RANLIB	Makefile	/^RANLIB = mipsel-openwrt-linux-ranlib$/;"	m
REQUEST_TYPE_COUNTERS	centralserver.h	38;"	d
REQUEST_TYPE_LOGIN	centralserver.h	34;"	d
REQUEST_TYPE_LOGOUT	centralserver.h	36;"	d
SED	Makefile	/^SED = \/bin\/sed$/;"	m
SET_MAKE	Makefile	/^SET_MAKE = $/;"	m
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SOURCES	Makefile	/^SOURCES = $(libgateway_a_SOURCES) $(wdctl_SOURCES) $(wifidog_SOURCES)$/;"	m
STRIP	Makefile	/^STRIP = mipsel-openwrt-linux-strip$/;"	m
TARGET_ACCEPT	conf.h	/^    TARGET_ACCEPT,$/;"	e	enum:__anon4
TARGET_DROP	conf.h	/^    TARGET_DROP,$/;"	e	enum:__anon4
TARGET_LOG	conf.h	/^    TARGET_LOG,$/;"	e	enum:__anon4
TARGET_REJECT	conf.h	/^    TARGET_REJECT,$/;"	e	enum:__anon4
TARGET_ULOG	conf.h	/^    TARGET_ULOG$/;"	e	enum:__anon4
TO_NEXT_WORD	conf.c	437;"	d	file:
UNLOCK_CLIENT_LIST	client_list.h	119;"	d
UNLOCK_CONFIG	conf.h	239;"	d
UNLOCK_CYASSL_CTX	simple_http.c	147;"	d	file:
UNLOCK_GHBN	util.c	69;"	d	file:
UTHASH_VERSION	uthash.h	80;"	d
UT_hash_bucket	uthash.h	/^typedef struct UT_hash_bucket {$/;"	s
UT_hash_bucket	uthash.h	/^} UT_hash_bucket;$/;"	t	typeref:struct:UT_hash_bucket
VERSION	Makefile	/^VERSION = 1.3.0$/;"	m
WDCTL_KILL	wdctl.h	35;"	d
WDCTL_RESTART	wdctl.h	36;"	d
WDCTL_STATUS	wdctl.h	33;"	d
WDCTL_STOP	wdctl.h	34;"	d
WDCTL_UNDEF	wdctl.h	32;"	d
WD_SHELL_PATH	util.c	77;"	d	file:
WD_SHELL_PATH	util.c	79;"	d	file:
WIFIDOG_MAJOR_VERSION	Makefile	/^WIFIDOG_MAJOR_VERSION = 1$/;"	m
WIFIDOG_MICRO_VERSION	Makefile	/^WIFIDOG_MICRO_VERSION = 0$/;"	m
WIFIDOG_MINOR_VERSION	Makefile	/^WIFIDOG_MINOR_VERSION = 3$/;"	m
WIFIDOG_VERSION	Makefile	/^WIFIDOG_VERSION = 1.3.0$/;"	m
WP	uthash.h	547;"	d
_AUTH_H_	auth.h	29;"	d
_CENTRALSERVER_H_	centralserver.h	29;"	d
_CLIENT_HASH_H_	client_hash.h	2;"	d
_CLIENT_LIST_H_	client_list.h	29;"	d
_COMMANDLINE_H_	commandline.h	29;"	d
_COMMON_H_	common.h	28;"	d
_CONFIG_H_	conf.h	29;"	d
_DEBUG_H_	debug.h	28;"	d
_FIREWALL_H_	firewall.h	29;"	d
_FW_IPTABLES_H_	fw_iptables.h	29;"	d
_GATEWAY_H_	gateway.h	29;"	d
_GNU_SOURCE	auth.c	28;"	d	file:
_GNU_SOURCE	client_list.c	27;"	d	file:
_GNU_SOURCE	conf.c	29;"	d	file:
_GNU_SOURCE	firewall.c	29;"	d	file:
_GNU_SOURCE	fw_iptables.c	29;"	d	file:
_GNU_SOURCE	http.c	31;"	d	file:
_GNU_SOURCE	httpd_thread.c	28;"	d	file:
_GNU_SOURCE	ping_thread.c	30;"	d	file:
_GNU_SOURCE	safe.c	29;"	d	file:
_GNU_SOURCE	util.c	29;"	d	file:
_GNU_SOURCE	wd_util.c	28;"	d	file:
_GNU_SOURCE	wdctl.c	27;"	d	file:
_GNU_SOURCE	wdctl_thread.c	27;"	d	file:
_HTTPD_THREAD_H_	httpd_thread.h	28;"	d
_HTTP_H_	http.h	28;"	d
_KMP_H_	kmp.h	2;"	d
_PING_THREAD_H_	ping_thread.h	29;"	d
_PSTRING_H_	pstring.h	28;"	d
_SAFE_H_	safe.h	29;"	d
_SIMPLE_HTTP_H_	simple_http.h	23;"	d
_STR_H_	str.h	2;"	d
_UTHASH_H_	uthash.h	25;"	d
_UTIL_H_	util.h	28;"	d
_WDCTL_H_	wdctl.h	28;"	d
_WDCTL_THREAD_H_	wdctl_thread.h	28;"	d
_WD_UTIL_H_	wd_util.h	28;"	d
_auth_serv_t	conf.h	/^typedef struct _auth_serv_t {$/;"	s
_connect_auth_server	centralserver.c	/^_connect_auth_server(int level)$/;"	f
_debug	debug.c	/^_debug(const char *filename, int line, int level, const char *format, ...)$/;"	f
_debug_conf	debug.h	/^typedef struct _debug_conf {$/;"	s
_fd_list	safe.c	/^typedef struct _fd_list {$/;"	s	file:
_firewall_rule_t	conf.h	/^typedef struct _firewall_rule_t {$/;"	s
_firewall_ruleset_t	conf.h	/^typedef struct _firewall_ruleset_t {$/;"	s
_fw_deny_raw	firewall.c	/^_fw_deny_raw(const char *ip, const char *mac, const int mark)$/;"	f	file:
_parse_firewall_rule	conf.c	/^_parse_firewall_rule(const char *ruleset, char *leftover)$/;"	f	file:
_popular_server_t	conf.h	/^typedef struct _popular_server_t {$/;"	s
_pstr_grow	pstring.c	/^_pstr_grow(pstr_t *pstr)$/;"	f	file:
_t_authresponse	auth.h	/^typedef struct _t_authresponse {$/;"	s
_t_client	client_hash.h	/^typedef struct _t_client {$/;"	s
_t_client	client_list.h	/^typedef struct _t_client {$/;"	s
_t_counters	client_hash.h	/^typedef struct _t_counters {$/;"	s
_t_counters	client_list.h	/^typedef struct _t_counters {$/;"	s
_t_fw_marks	firewall.h	/^typedef enum _t_fw_marks {$/;"	g
_trusted_or_black_ip_t	conf.h	/^typedef struct _trusted_or_black_ip_t {$/;"	s
_trusted_or_black_mac_t	conf.h	/^typedef struct _trusted_or_black_mac_t {$/;"	s
_trusted_or_black_wan_host_t	conf.h	/^typedef struct _trusted_or_black_wan_host_t {$/;"	s
abs_builddir	Makefile	/^abs_builddir = \/home\/jacky\/mt7620\/package\/pronetway\/wifidog-gateway-1.3.0\/src$/;"	m
abs_srcdir	Makefile	/^abs_srcdir = \/home\/jacky\/mt7620\/package\/pronetway\/wifidog-gateway-1.3.0\/src$/;"	m
abs_top_builddir	Makefile	/^abs_top_builddir = \/home\/jacky\/mt7620\/package\/pronetway\/wifidog-gateway-1.3.0$/;"	m
abs_top_srcdir	Makefile	/^abs_top_srcdir = \/home\/jacky\/mt7620\/package\/pronetway\/wifidog-gateway-1.3.0$/;"	m
ac_ct_AR	Makefile	/^ac_ct_AR = $/;"	m
ac_ct_CC	Makefile	/^ac_ct_CC = $/;"	m
ac_ct_CXX	Makefile	/^ac_ct_CXX = $/;"	m
ac_ct_DUMPBIN	Makefile	/^ac_ct_DUMPBIN = $/;"	m
add_popular_server	conf.c	/^add_popular_server(const char *server)$/;"	f	file:
am__aclocal_m4_deps	Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/configure.in$/;"	m
am__can_run_installinfo	Makefile	/^am__can_run_installinfo = \\$/;"	m
am__cd	Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__define_uniq_tagged_files	Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__depfiles_maybe	Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__include	Makefile	/^am__include = include$/;"	m
am__installdirs	Makefile	/^am__installdirs = "$(DESTDIR)$(bindir)"$/;"	m
am__is_gnu_make	Makefile	/^am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'$/;"	m
am__leading_dot	Makefile	/^am__leading_dot = .$/;"	m
am__make_dryrun	Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_running_with_option	Makefile	/^am__make_running_with_option = \\$/;"	m
am__mv	Makefile	/^am__mv = mv -f$/;"	m
am__quote	Makefile	/^am__quote = $/;"	m
am__tagged_files	Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tar	Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__uniquify_input	Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__untar	Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__v_AR_	Makefile	/^am__v_AR_ = $(am__v_AR_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_AR_0	Makefile	/^am__v_AR_0 = @echo "  AR      " $@;$/;"	m
am__v_AR_1	Makefile	/^am__v_AR_1 = $/;"	m
am__v_CCLD_	Makefile	/^am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCLD_0	Makefile	/^am__v_CCLD_0 = @echo "  CCLD    " $@;$/;"	m
am__v_CCLD_1	Makefile	/^am__v_CCLD_1 = $/;"	m
am__v_CC_	Makefile	/^am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CC_0	Makefile	/^am__v_CC_0 = @echo "  CC      " $@;$/;"	m
am__v_CC_1	Makefile	/^am__v_CC_1 = $/;"	m
am__v_GEN_	Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_0	Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_1	Makefile	/^am__v_GEN_1 = $/;"	m
am__v_P_	Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_0	Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_1	Makefile	/^am__v_P_1 = :$/;"	m
am__v_at_	Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_0	Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_1	Makefile	/^am__v_at_1 = $/;"	m
am__v_lt_	Makefile	/^am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_lt_0	Makefile	/^am__v_lt_0 = --silent$/;"	m
am__v_lt_1	Makefile	/^am__v_lt_1 = $/;"	m
am_libgateway_a_OBJECTS	Makefile	/^am_libgateway_a_OBJECTS = commandline.$(OBJEXT) conf.$(OBJEXT) \\$/;"	m
am_wdctl_OBJECTS	Makefile	/^am_wdctl_OBJECTS = wdctl.$(OBJEXT)$/;"	m
am_wifidog_OBJECTS	Makefile	/^am_wifidog_OBJECTS = main.$(OBJEXT)$/;"	m
append_x_restartargv	gateway.c	/^append_x_restartargv(void)$/;"	f
arp_get	firewall.c	/^arp_get(const char *req_ip)$/;"	f
arp_table_path	conf.h	/^    char *arp_table_path;                               \/**< @brief Path to custom ARP table, formatted like \/proc\/net\/arp *\/$/;"	m	struct:__anon5
auth_server_build_request	centralserver.c	/^auth_server_build_request(char *request, int size, int client_num, struct client *client)$/;"	f
auth_server_nrequest	centralserver.c	/^auth_server_nrequest(t_authresponse * authresponse, const char *request_type, int client_num, struct client *client)$/;"	f
auth_server_request	centralserver.c	/^auth_server_request(t_authresponse * authresponse, const char *request_type, const char *ip, const char *mac,$/;"	f
auth_servers	conf.h	/^    t_auth_serv *auth_servers;                          \/**< @brief Auth servers list *\/$/;"	m	struct:__anon5
authcode	auth.h	/^    t_authcode authcode; \/**< Authentication code returned by the server *\/$/;"	m	struct:_t_authresponse
authenticate_client	auth.c	/^authenticate_client(request * r)$/;"	f
authserv_auth_script_path_fragment	conf.h	/^    char *authserv_auth_script_path_fragment;   \/**< @brief This is the script that talks the wifidog gateway protocol. *\/$/;"	m	struct:_auth_serv_t
authserv_hostname	conf.h	/^    char *authserv_hostname;                    \/**< @brief Hostname of the central server *\/$/;"	m	struct:_auth_serv_t
authserv_http_port	conf.h	/^    int authserv_http_port;                     \/**< @brief Http port the central server listens on *\/$/;"	m	struct:_auth_serv_t
authserv_login_script_path_fragment	conf.h	/^    char *authserv_login_script_path_fragment;  \/**< @brief This is the script the user will be sent to for login. *\/$/;"	m	struct:_auth_serv_t
authserv_msg_script_path_fragment	conf.h	/^    char *authserv_msg_script_path_fragment;    \/**< @brief This is the script the user will be sent to upon error to read a readable message. *\/$/;"	m	struct:_auth_serv_t
authserv_path	conf.h	/^    char *authserv_path;                        \/**< @brief Path where wifidog resides *\/$/;"	m	struct:_auth_serv_t
authserv_ping_script_path_fragment	conf.h	/^    char *authserv_ping_script_path_fragment;   \/**< @brief This is the ping heartbeating script. *\/$/;"	m	struct:_auth_serv_t
authserv_portal_script_path_fragment	conf.h	/^    char *authserv_portal_script_path_fragment; \/**< @brief This is the script the user will be sent to after a successfull login. *\/$/;"	m	struct:_auth_serv_t
authserv_ssl_port	conf.h	/^    int authserv_ssl_port;                      \/**< @brief Https port the central server listens on *\/$/;"	m	struct:_auth_serv_t
authserv_use_ssl	conf.h	/^    int authserv_use_ssl;                       \/**< @brief Use SSL or not *\/$/;"	m	struct:_auth_serv_t
bin_PROGRAMS	Makefile	/^bin_PROGRAMS = wifidog$(EXEEXT) wdctl$(EXEEXT)$/;"	m
bindir	Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
blackiplist	conf.h	/^    t_trusted_or_black_ip *blackiplist;                 \/**< @brief list of black ips *\/$/;"	m	struct:__anon5
blackmaclist	conf.h	/^    t_trusted_or_black_mac *blackmaclist;               \/**< @brief list of black macs *\/$/;"	m	struct:__anon5
blackwanhostlist	conf.h	/^    t_trusted_or_black_wan_host *blackwanhostlist;      \/**< @brief list of black wan hosts *\/$/;"	m	struct:__anon5
bloom_bv	uthash.h	/^	uint8_t *bloom_bv;$/;"	m	struct:ut_hash_table
bloom_nbits	uthash.h	/^	uint8_t bloom_nbits;$/;"	m	struct:ut_hash_table
bloom_sig	uthash.h	/^	uint32_t bloom_sig;		\/* used only to test bloom exists in external analysis *\/$/;"	m	struct:ut_hash_table
buckets	uthash.h	/^	UT_hash_bucket *buckets;$/;"	m	struct:ut_hash_table
buf	pstring.h	/^    char *buf;   \/**< @brief Buffer used to hold string. Pointer subject to change. *\/$/;"	m	struct:pstr
build	Makefile	/^build = i686-pc-linux-gnu$/;"	m
build_alias	Makefile	/^build_alias = $/;"	m
build_cpu	Makefile	/^build_cpu = i686$/;"	m
build_os	Makefile	/^build_os = linux-gnu$/;"	m
build_triplet	Makefile	/^build_triplet = i686-pc-linux-gnu$/;"	m
build_vendor	Makefile	/^build_vendor = pc$/;"	m
builddir	Makefile	/^builddir = .$/;"	m
check_config_version	ping_thread.c	/^check_config_version(const char *res, const t_auth_serv *auth_server)$/;"	f
check_ip_format	conf.c	/^check_ip_format(char *possibleip)$/;"	f
check_logout	ping_thread.c	/^check_logout(const char *res)$/;"	f
check_mac_format	conf.c	/^check_mac_format(char *possiblemac)$/;"	f
checkinterval	conf.h	/^    int checkinterval;                                  \/**< @brief Frequency the the client timeout check thread will run. *\/$/;"	m	struct:__anon5
cleanup_fds	safe.c	/^cleanup_fds(void)$/;"	f	file:
client	common.h	/^struct client {$/;"	s
client_copy	firewall.c	/^client_copy(struct client *dst, const t_client *src)$/;"	f	file:
client_dup	client_list.c	/^client_dup(const t_client * src)$/;"	f
client_free_node	client_list.c	/^client_free_node(t_client * client)$/;"	f
client_get_first_client	client_list.c	/^client_get_first_client(void)$/;"	f
client_get_new	client_list.c	/^client_get_new(void)$/;"	f
client_id	client_list.c	/^static volatile unsigned long long client_id = 1;$/;"	v	file:
client_id_mutex	client_list.c	/^static pthread_mutex_t client_id_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
client_list_add	client_list.c	/^client_list_add(const char *ip, const char *mac, const char *token)$/;"	f
client_list_delete	client_list.c	/^client_list_delete(t_client * client)$/;"	f
client_list_destroy	client_list.c	/^client_list_destroy(t_client * list)$/;"	f
client_list_dup	client_list.c	/^client_list_dup(t_client ** dest)$/;"	f
client_list_find	client_list.c	/^client_list_find(const char *ip, const char *mac)$/;"	f
client_list_find_by_client	client_list.c	/^client_list_find_by_client(t_client * client)$/;"	f
client_list_find_by_ip	client_list.c	/^client_list_find_by_ip(const char *ip)$/;"	f
client_list_find_by_mac	client_list.c	/^client_list_find_by_mac(const char *mac)$/;"	f
client_list_find_by_token	client_list.c	/^client_list_find_by_token(const char *token)$/;"	f
client_list_init	client_list.c	/^client_list_init(void)$/;"	f
client_list_insert_client	client_list.c	/^client_list_insert_client(t_client * client)$/;"	f
client_list_mutex	client_list.c	/^pthread_mutex_t client_list_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
client_list_remove	client_list.c	/^client_list_remove(t_client * client)$/;"	f
clienttimeout	conf.h	/^    int clienttimeout;                                  \/**< @brief How many CheckIntervals before a client must be re-authenticated *\/$/;"	m	struct:__anon5
close_icmp_socket	util.c	/^close_icmp_socket(void)$/;"	f
command	wdctl.h	/^    int command;$/;"	m	struct:__anon6
config	conf.c	/^static s_config config;$/;"	v	file:
config	wdctl.c	/^static s_config config;$/;"	v	file:
config_get_config	conf.c	/^config_get_config(void)$/;"	f
config_init	conf.c	/^config_init(void)$/;"	f
config_init_override	conf.c	/^config_init_override(void)$/;"	f
config_mutex	conf.c	/^pthread_mutex_t config_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
config_notnull	conf.c	/^config_notnull(const void *parm, const char *parmname)$/;"	f	file:
config_parse_token	conf.c	/^config_parse_token(const char *cp, const char *filename, int linenum)$/;"	f	file:
config_read	conf.c	/^config_read(const char *filename)$/;"	f
config_validate	conf.c	/^config_validate(void)$/;"	f
config_write	conf.c	/^int config_write(const char *filename, const char *name, const char *value)$/;"	f
configfile	conf.h	/^    char *configfile;                                   \/**< @brief name of the config file *\/$/;"	m	struct:__anon5
connect_auth_server	centralserver.c	/^connect_auth_server()$/;"	f
connect_to_server	wdctl.c	/^connect_to_server(const char *sock_name)$/;"	f	file:
count	uthash.h	/^	unsigned count;$/;"	m	struct:UT_hash_bucket
counters	client_hash.h	/^	t_counters counters;					\/**< @brief Counters for input\/output of the client. *\/$/;"	m	struct:_t_client
counters	client_list.h	/^    t_counters counters;                \/**< @brief Counters for input\/output of$/;"	m	struct:_t_client
create_unix_socket	wdctl_thread.c	/^create_unix_socket(const char *sock_name)$/;"	f	file:
cyassl_ctx	simple_http.c	/^static CYASSL_CTX *cyassl_ctx = NULL;$/;"	v	file:
cyassl_ctx_mutex	simple_http.c	/^static pthread_mutex_t cyassl_ctx_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
daemon	conf.h	/^    int daemon;                                         \/**< @brief if daemon > 0, use daemon mode *\/$/;"	m	struct:__anon5
datadir	Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	Makefile	/^datarootdir = ${prefix}\/share$/;"	m
debug	debug.h	44;"	d
debugconf	debug.c	/^debugconf_t debugconf = {$/;"	v
debugconf_t	debug.h	/^} debugconf_t;$/;"	t	typeref:struct:_debug_conf
debuglevel	debug.h	/^    int debuglevel;      \/**< @brief Debug information verbosity *\/$/;"	m	struct:_debug_conf
deltatraffic	conf.h	/^    int deltatraffic;                                   \/**< @brief reset each user's traffic (Outgoing and Incoming) value after each Auth operation. *\/$/;"	m	struct:__anon5
depcomp	Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/config\/depcomp$/;"	m
docdir	Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE}$/;"	m
dvidir	Makefile	/^dvidir = ${docdir}$/;"	m
enable_dot	Makefile	/^enable_dot = no$/;"	m
enable_html_docs	Makefile	/^enable_html_docs = yes$/;"	m
enable_latex_docs	Makefile	/^enable_latex_docs = no$/;"	m
exec_prefix	Makefile	/^exec_prefix = ${prefix}$/;"	m
execute	util.c	/^execute(const char *cmd_line, int quiet)$/;"	f
expand_mult	uthash.h	/^	unsigned expand_mult;$/;"	m	struct:UT_hash_bucket
external_interface	conf.h	/^    char *external_interface;                           \/**< @brief External network interface name for firewall rules *\/$/;"	m	struct:__anon5
fd	client_hash.h	/^	int fd;									\/**< @brief Client HTTP socket (valid only during login before one of the _http_* function is called *\/$/;"	m	struct:_t_client
fd	client_list.h	/^    int fd;                             \/**< @brief Client HTTP socket (valid only$/;"	m	struct:_t_client
fd	safe.c	/^    int fd;                 \/**< @brief file descriptor *\/$/;"	m	struct:_fd_list	file:
fd_list	safe.c	/^static fd_list_t *fd_list = NULL;$/;"	v	file:
fd_list_t	safe.c	/^} fd_list_t;$/;"	t	typeref:struct:_fd_list	file:
find_char	ping_thread.c	/^find_char(const char *str, char ch)$/;"	f	file:
firstclient	client_list.c	/^static t_client *firstclient = NULL;$/;"	v	file:
found	conf.c	/^static int found(char *line, const char *name)$/;"	f	file:
func_exec_program	wifidog	/^func_exec_program ()$/;"	f
func_exec_program_core	wifidog	/^func_exec_program_core ()$/;"	f
func_fallback_echo	wifidog	/^func_fallback_echo ()$/;"	f
func_lt_dump_args	wifidog	/^func_lt_dump_args ()$/;"	f
func_parse_lt_options	wifidog	/^func_parse_lt_options ()$/;"	f
fw_access_t	fw_iptables.h	/^} fw_access_t;$/;"	t	typeref:enum:fw_access_t_
fw_access_t_	fw_iptables.h	/^typedef enum fw_access_t_ {$/;"	g
fw_allow	firewall.c	/^fw_allow(t_client * client, int new_fw_connection_state)$/;"	f
fw_allow_host	firewall.c	/^fw_allow_host(const char *host)$/;"	f
fw_clear_authservers	firewall.c	/^fw_clear_authservers(void)$/;"	f
fw_connection_state	client_hash.h	/^	int fw_connection_state;				\/**< @brief Connection state in the firewall *\/$/;"	m	struct:_t_client
fw_connection_state	client_list.h	/^    int fw_connection_state;     \/**< @brief Connection state in the$/;"	m	struct:_t_client
fw_deny	firewall.c	/^fw_deny(t_client * client)$/;"	f
fw_destroy	firewall.c	/^fw_destroy(void)$/;"	f
fw_init	firewall.c	/^fw_init(void)$/;"	f
fw_quiet	fw_iptables.c	/^static int fw_quiet = 0;$/;"	v	file:
fw_set_authdown	firewall.c	/^fw_set_authdown(void)$/;"	f
fw_set_authservers	firewall.c	/^fw_set_authservers(void)$/;"	f
fw_set_authup	firewall.c	/^fw_set_authup(void)$/;"	f
fw_sync_with_authserver	firewall.c	/^fw_sync_with_authserver(void)$/;"	f
get16bits	uthash.h	476;"	d
get16bits	uthash.h	479;"	d
get16bits	uthash.h	483;"	d
get_auth_server	conf.c	/^get_auth_server(void)$/;"	f
get_clients_from_parent	gateway.c	/^get_clients_from_parent(void)$/;"	f
get_cyassl_ctx	simple_http.c	/^get_cyassl_ctx(const char *hostname)$/;"	f	file:
get_ext_iface	util.c	/^get_ext_iface(void)$/;"	f
get_iface_ip	util.c	/^get_iface_ip(const char *ifname)$/;"	f
get_iface_mac	util.c	/^get_iface_mac(const char *ifname)$/;"	f
get_next	kmp.c	/^static void get_next(const char *p, int *next)$/;"	f	file:
get_pos	kmp.c	/^static int get_pos(const char *t, const char *p, int *next)$/;"	f	file:
get_ruleset	conf.c	/^get_ruleset(const char *ruleset)$/;"	f
get_status_text	wd_util.c	/^get_status_text()$/;"	f
ghbn_mutex	util.c	/^static pthread_mutex_t ghbn_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
got_conf_value	ping_thread.c	/^int got_conf_value(const char *str, const char *key, char *value, int size)$/;"	f
got_pong_value	ping_thread.c	/^got_pong_value(const char *str, const char *key, char *value, int size)$/;"	f
got_port	fw_iptables.c	/^got_port(const char *host, char *new_host, char *port)$/;"	f	file:
gw_address	conf.h	/^    char *gw_address;                                   \/**< @brief Internal IP address for our web server *\/$/;"	m	struct:__anon5
gw_id	conf.h	/^    char *gw_id;                                        \/**< @brief ID of the Gateway, sent to central server *\/$/;"	m	struct:__anon5
gw_interface	conf.h	/^    char *gw_interface;                                 \/**< @brief Interface we will accept connections on *\/$/;"	m	struct:__anon5
gw_main	gateway.c	/^gw_main(int argc, char **argv)$/;"	f
gw_port	conf.h	/^    int gw_port;                                        \/**< @brief Port the webserver will run on *\/$/;"	m	struct:__anon5
hashv	uthash.h	/^	unsigned hashv;					\/* result of hash-fcn(key)        *\/$/;"	m	struct:ut_hash_handle
hh	client_hash.h	/^	ut_hash_handle hh;						\/**< @brief Make this struct hashable *\/$/;"	m	struct:_t_client
hh_head	uthash.h	/^	struct ut_hash_handle *hh_head;$/;"	m	struct:UT_hash_bucket	typeref:struct:UT_hash_bucket::ut_hash_handle
hh_next	uthash.h	/^	struct ut_hash_handle *hh_next;	\/* next hh in bucket order        *\/$/;"	m	struct:ut_hash_handle	typeref:struct:ut_hash_handle::ut_hash_handle
hh_prev	uthash.h	/^	struct ut_hash_handle *hh_prev;	\/* previous hh in bucket order    *\/$/;"	m	struct:ut_hash_handle	typeref:struct:ut_hash_handle::ut_hash_handle
hho	uthash.h	/^	ptrdiff_t hho;					\/* hash handle offset (byte pos of hash handle in element *\/$/;"	m	struct:ut_hash_table
host	Makefile	/^host = mipsel-openwrt-linux-gnu$/;"	m
host	conf.h	/^    char *host;$/;"	m	struct:_trusted_or_black_wan_host_t
host_alias	Makefile	/^host_alias = mipsel-openwrt-linux$/;"	m
host_cpu	Makefile	/^host_cpu = mipsel$/;"	m
host_os	Makefile	/^host_os = linux-gnu$/;"	m
host_triplet	Makefile	/^host_triplet = mipsel-openwrt-linux-gnu$/;"	m
host_vendor	Makefile	/^host_vendor = openwrt$/;"	m
hostname	conf.h	/^    char *hostname;$/;"	m	struct:_popular_server_t
htmldir	Makefile	/^htmldir = ${docdir}$/;"	m
htmlmsgfile	conf.h	/^    char *htmlmsgfile;                                  \/**< @brief name of the HTML file used for messages *\/$/;"	m	struct:__anon5
http_callback_404	http.c	/^http_callback_404(httpd * webserver, request * r, int error_code)$/;"	f
http_callback_about	http.c	/^http_callback_about(httpd * webserver, request * r)$/;"	f
http_callback_auth	http.c	/^http_callback_auth(httpd * webserver, request * r)$/;"	f
http_callback_disconnect	http.c	/^http_callback_disconnect(httpd * webserver, request * r)$/;"	f
http_callback_status	http.c	/^http_callback_status(httpd * webserver, request * r)$/;"	f
http_callback_wifidog	http.c	/^http_callback_wifidog(httpd * webserver, request * r)$/;"	f
http_get	simple_http.c	/^http_get(const int sockfd, const char *req)$/;"	f
http_send_redirect	http.c	/^http_send_redirect(request * r, const char *url, const char *text)$/;"	f
http_send_redirect_to_auth	http.c	/^http_send_redirect_to_auth(request * r, const char *urlFragment, const char *text)$/;"	f
httpdmaxconn	conf.h	/^    int httpdmaxconn;                                   \/**< @brief Used by libhttpd, not sure what it does *\/$/;"	m	struct:__anon5
httpdname	conf.h	/^    char *httpdname;                                    \/**< @brief Name the web server will return when replying to a request *\/$/;"	m	struct:__anon5
httpdpassword	conf.h	/^    char *httpdpassword;                                \/**< @brief Password for HTTP authentication *\/$/;"	m	struct:__anon5
httpdrealm	conf.h	/^    char *httpdrealm;                                   \/**< @brief HTTP Authentication realm *\/$/;"	m	struct:__anon5
httpdusername	conf.h	/^    char *httpdusername;                                \/**< @brief Username for HTTP authentication *\/$/;"	m	struct:__anon5
https_get	simple_http.c	/^https_get(const int sockfd, const char *req, const char *hostname)$/;"	f
icmp_fd	util.c	/^static int icmp_fd;$/;"	v	file:
icmp_ping	util.c	/^icmp_ping(const char *host)$/;"	f
id	client_list.h	/^    unsigned long long id;           \/**< @brief Unique ID per client *\/$/;"	m	struct:_t_client
ideal_chain_maxlen	uthash.h	/^	unsigned ideal_chain_maxlen;$/;"	m	struct:ut_hash_table
includedir	Makefile	/^includedir = ${prefix}\/include$/;"	m
incoming	client_hash.h	/^	unsigned long long incoming;			\/**< @brief Incoming data total*\/$/;"	m	struct:_t_counters
incoming	client_list.h	/^    unsigned long long incoming;        \/**< @brief Incoming data total*\/$/;"	m	struct:_t_counters
incoming	common.h	/^	int incoming;$/;"	m	struct:client
incoming_delta	client_hash.h	/^	unsigned long long incoming_delta;		\/**< @brief Incoming data after last report*\/$/;"	m	struct:_t_counters
incoming_delta	client_list.h	/^    unsigned long long incoming_delta;                    \/**< @brief Incoming data after last report*\/$/;"	m	struct:_t_counters
incoming_history	client_hash.h	/^	unsigned long long incoming_history;	\/**< @brief Incoming data before wifidog restarted*\/$/;"	m	struct:_t_counters
incoming_history	client_list.h	/^    unsigned long long incoming_history;        \/**< @brief Incoming data before wifidog restarted*\/$/;"	m	struct:_t_counters
ineff_expands	uthash.h	/^	unsigned ineff_expands, noexpand;$/;"	m	struct:ut_hash_table
infodir	Makefile	/^infodir = ${datarootdir}\/info$/;"	m
init_config	wdctl.c	/^init_config(void)$/;"	f	file:
init_icmp_socket	util.c	/^init_icmp_socket(void)$/;"	f
init_signals	gateway.c	/^init_signals(void)$/;"	f	file:
install_sh	Makefile	/^install_sh = ${SHELL} \/home\/jacky\/mt7620\/package\/pronetway\/wifidog-gateway-1.3.0\/config\/install-sh$/;"	m
install_sh_DATA	Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
internal_sock	conf.h	/^    char *internal_sock;                                \/**< @brief internal path to socket *\/$/;"	m	struct:__anon5
ip	client_hash.h	/^	char *ip;								\/**< @brief Client Ip address *\/$/;"	m	struct:_t_client
ip	client_list.h	/^    char *ip;                           \/**< @brief Client Ip address *\/$/;"	m	struct:_t_client
ip	common.h	/^    char ip[16];$/;"	m	struct:client
ip	conf.h	/^    char *ip;$/;"	m	struct:_trusted_or_black_ip_t
iptables_compile	fw_iptables.c	/^iptables_compile(const char *table, const char *chain, const t_firewall_rule * rule)$/;"	f	file:
iptables_do_command	fw_iptables.c	/^iptables_do_command(const char *format, ...)$/;"	f	file:
iptables_fw_access	fw_iptables.c	/^iptables_fw_access(fw_access_t type, const char *ip, const char *mac, int tag)$/;"	f
iptables_fw_access_host	fw_iptables.c	/^iptables_fw_access_host(fw_access_t type, const char *host)$/;"	f
iptables_fw_auth_reachable	fw_iptables.c	/^iptables_fw_auth_reachable(void)$/;"	f
iptables_fw_auth_unreachable	fw_iptables.c	/^iptables_fw_auth_unreachable(int tag)$/;"	f
iptables_fw_clear_authservers	fw_iptables.c	/^iptables_fw_clear_authservers(void)$/;"	f
iptables_fw_counters_update	fw_iptables.c	/^iptables_fw_counters_update(void)$/;"	f
iptables_fw_destroy	fw_iptables.c	/^iptables_fw_destroy(void)$/;"	f
iptables_fw_destroy_mention	fw_iptables.c	/^iptables_fw_destroy_mention(const char *table, const char *chain, const char *mention)$/;"	f
iptables_fw_init	fw_iptables.c	/^iptables_fw_init(void)$/;"	f
iptables_fw_set_authservers	fw_iptables.c	/^iptables_fw_set_authservers(void)$/;"	f
iptables_insert_gateway_id	fw_iptables.c	/^iptables_insert_gateway_id(char **input)$/;"	f	file:
iptables_load_ruleset	fw_iptables.c	/^iptables_load_ruleset(const char *table, const char *ruleset, const char *chain)$/;"	f	file:
is_auth_online	wd_util.c	/^is_auth_online()$/;"	f
is_lower	str.c	/^int is_lower(char ch)$/;"	f
is_online	wd_util.c	/^is_online()$/;"	f
is_upper	str.c	/^int is_upper(char ch)$/;"	f
key	uthash.h	/^	void *key;						\/* ptr to enclosing struct's key  *\/$/;"	m	struct:ut_hash_handle
keylen	uthash.h	/^	unsigned keylen;				\/* enclosing struct's key len     *\/$/;"	m	struct:ut_hash_handle
keywords	conf.c	/^} keywords[] = {$/;"	v	typeref:struct:__anon3	file:
kmp	kmp.c	/^int kmp(const char *t, const char *p)$/;"	f
last_auth_offline_time	wd_util.c	/^static time_t last_auth_offline_time = 0;$/;"	v	file:
last_auth_online_time	wd_util.c	/^static time_t last_auth_online_time = 0;$/;"	v	file:
last_ip	conf.h	/^    char *last_ip;                              \/**< @brief Last ip used by authserver *\/$/;"	m	struct:_auth_serv_t
last_offline_time	wd_util.c	/^static time_t last_offline_time = 0;$/;"	v	file:
last_online_time	wd_util.c	/^static time_t last_online_time = 0;$/;"	v	file:
last_updated	client_hash.h	/^	time_t last_updated;					\/**< @brief Last update of the counters *\/$/;"	m	struct:_t_counters
last_updated	client_list.h	/^    time_t last_updated;        \/**< @brief Last update of the counters *\/$/;"	m	struct:_t_counters
len	pstring.h	/^    size_t len;  \/**< @brief Current length of the string. *\/$/;"	m	struct:pstr
libdir	Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libgateway_a_AR	Makefile	/^libgateway_a_AR = $(AR) $(ARFLAGS)$/;"	m
libgateway_a_LIBADD	Makefile	/^libgateway_a_LIBADD =$/;"	m
libgateway_a_OBJECTS	Makefile	/^libgateway_a_OBJECTS = $(am_libgateway_a_OBJECTS)$/;"	m
libgateway_a_SOURCES	Makefile	/^libgateway_a_SOURCES = commandline.c \\$/;"	m
localedir	Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	Makefile	/^localstatedir = ${prefix}\/var$/;"	m
log2_num_buckets	uthash.h	/^	unsigned num_buckets, log2_num_buckets;$/;"	m	struct:ut_hash_table
log_stderr	debug.h	/^    int log_stderr;      \/**< @brief Output log to stdout *\/$/;"	m	struct:_debug_conf
log_syslog	debug.h	/^    int log_syslog;      \/**< @brief Output log to syslog *\/$/;"	m	struct:_debug_conf
logout_client	auth.c	/^logout_client(t_client * client)$/;"	f
logout_nclient	auth.c	/^logout_nclient(int client_num, struct client *client)$/;"	f
ltrim	str.c	/^char *ltrim(char *s)$/;"	f
mac	client_hash.h	/^	char *mac;								\/**< @brief Client Mac address *\/$/;"	m	struct:_t_client
mac	client_list.h	/^    char *mac;                          \/**< @brief Client Mac address *\/$/;"	m	struct:_t_client
mac	common.h	/^    char mac[20];$/;"	m	struct:client
mac	conf.h	/^    char *mac;$/;"	m	struct:_trusted_or_black_mac_t
main	main.c	/^main(int argc, char **argv)$/;"	f
main	wdctl.c	/^main(int argc, char **argv)$/;"	f
main_loop	gateway.c	/^main_loop(void)$/;"	f	file:
mandir	Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mark_auth_offline	wd_util.c	/^mark_auth_offline()$/;"	f
mark_auth_online	wd_util.c	/^mark_auth_online()$/;"	f
mark_auth_server_bad	conf.c	/^mark_auth_server_bad(t_auth_serv * bad_server)$/;"	f
mark_offline	wd_util.c	/^mark_offline()$/;"	f
mark_online	wd_util.c	/^mark_online()$/;"	f
mask	conf.h	/^    char *mask;                 \/**< @brief Mask for the rule *destination* *\/$/;"	m	struct:_firewall_rule_t
mask_is_ipset	conf.h	/^    int mask_is_ipset;          \/**< @brief *destination* is ipset  *\/$/;"	m	struct:_firewall_rule_t
missing_parms	conf.c	/^static int missing_parms;$/;"	v	file:
mkdir_p	Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkinstalldirs	Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
name	conf.c	/^    const char *name;$/;"	m	struct:__anon3	file:
name	conf.h	/^    char *name;$/;"	m	struct:_firewall_ruleset_t
next	client_list.h	/^    struct _t_client *next;             \/**< @brief Pointer to the next client *\/$/;"	m	struct:_t_client	typeref:struct:_t_client::_t_client
next	conf.h	/^    struct _auth_serv_t *next;$/;"	m	struct:_auth_serv_t	typeref:struct:_auth_serv_t::_auth_serv_t
next	conf.h	/^    struct _firewall_rule_t *next;$/;"	m	struct:_firewall_rule_t	typeref:struct:_firewall_rule_t::_firewall_rule_t
next	conf.h	/^    struct _firewall_ruleset_t *next;$/;"	m	struct:_firewall_ruleset_t	typeref:struct:_firewall_ruleset_t::_firewall_ruleset_t
next	conf.h	/^    struct _popular_server_t *next;$/;"	m	struct:_popular_server_t	typeref:struct:_popular_server_t::_popular_server_t
next	conf.h	/^    struct _trusted_or_black_ip_t *next;$/;"	m	struct:_trusted_or_black_ip_t	typeref:struct:_trusted_or_black_ip_t::_trusted_or_black_ip_t
next	conf.h	/^    struct _trusted_or_black_mac_t *next;$/;"	m	struct:_trusted_or_black_mac_t	typeref:struct:_trusted_or_black_mac_t::_trusted_or_black_mac_t
next	conf.h	/^    struct _trusted_or_black_wan_host_t *next;$/;"	m	struct:_trusted_or_black_wan_host_t	typeref:struct:_trusted_or_black_wan_host_t::_trusted_or_black_wan_host_t
next	safe.c	/^    struct _fd_list *next;  \/**< @brief linked list pointer *\/$/;"	m	struct:_fd_list	typeref:struct:_fd_list::_fd_list	file:
next	uthash.h	/^	void *next;						\/* next element in app order      *\/$/;"	m	struct:ut_hash_handle
noexpand	uthash.h	/^	unsigned ineff_expands, noexpand;$/;"	m	struct:ut_hash_table
noinst_HEADERS	Makefile	/^noinst_HEADERS = commandline.h \\$/;"	m
noinst_LIBRARIES	Makefile	/^noinst_LIBRARIES = libgateway.a$/;"	m
nonideal_items	uthash.h	/^	unsigned nonideal_items;$/;"	m	struct:ut_hash_table
num_buckets	uthash.h	/^	unsigned num_buckets, log2_num_buckets;$/;"	m	struct:ut_hash_table
num_items	uthash.h	/^	unsigned num_items;$/;"	m	struct:ut_hash_table
oAuthServAuthScriptPathFragment	conf.c	/^    oAuthServAuthScriptPathFragment,$/;"	e	enum:__anon2	file:
oAuthServHTTPPort	conf.c	/^    oAuthServHTTPPort,$/;"	e	enum:__anon2	file:
oAuthServHostname	conf.c	/^    oAuthServHostname,$/;"	e	enum:__anon2	file:
oAuthServLoginScriptPathFragment	conf.c	/^    oAuthServLoginScriptPathFragment,$/;"	e	enum:__anon2	file:
oAuthServMsgScriptPathFragment	conf.c	/^    oAuthServMsgScriptPathFragment,$/;"	e	enum:__anon2	file:
oAuthServPath	conf.c	/^    oAuthServPath,$/;"	e	enum:__anon2	file:
oAuthServPingScriptPathFragment	conf.c	/^    oAuthServPingScriptPathFragment,$/;"	e	enum:__anon2	file:
oAuthServPortalScriptPathFragment	conf.c	/^    oAuthServPortalScriptPathFragment,$/;"	e	enum:__anon2	file:
oAuthServSSLAvailable	conf.c	/^    oAuthServSSLAvailable,$/;"	e	enum:__anon2	file:
oAuthServSSLPort	conf.c	/^    oAuthServSSLPort,$/;"	e	enum:__anon2	file:
oAuthServer	conf.c	/^    oAuthServer,$/;"	e	enum:__anon2	file:
oBadOption	conf.c	/^    oBadOption,$/;"	e	enum:__anon2	file:
oBlackIPList	conf.c	/^    oBlackIPList,$/;"	e	enum:__anon2	file:
oBlackMACList	conf.c	/^    oBlackMACList,$/;"	e	enum:__anon2	file:
oBlackWANHOSTList	conf.c	/^    oBlackWANHOSTList,$/;"	e	enum:__anon2	file:
oCheckInterval	conf.c	/^    oCheckInterval,$/;"	e	enum:__anon2	file:
oClientTimeout	conf.c	/^    oClientTimeout,$/;"	e	enum:__anon2	file:
oDaemon	conf.c	/^    oDaemon,$/;"	e	enum:__anon2	file:
oDebugLevel	conf.c	/^    oDebugLevel,$/;"	e	enum:__anon2	file:
oDeltaTraffic	conf.c	/^    oDeltaTraffic,$/;"	e	enum:__anon2	file:
oExternalInterface	conf.c	/^    oExternalInterface,$/;"	e	enum:__anon2	file:
oFirewallRule	conf.c	/^    oFirewallRule,$/;"	e	enum:__anon2	file:
oFirewallRuleSet	conf.c	/^    oFirewallRuleSet,$/;"	e	enum:__anon2	file:
oGatewayAddress	conf.c	/^    oGatewayAddress,$/;"	e	enum:__anon2	file:
oGatewayID	conf.c	/^    oGatewayID,$/;"	e	enum:__anon2	file:
oGatewayInterface	conf.c	/^    oGatewayInterface,$/;"	e	enum:__anon2	file:
oGatewayPort	conf.c	/^    oGatewayPort,$/;"	e	enum:__anon2	file:
oHTTPDMaxConn	conf.c	/^    oHTTPDMaxConn,$/;"	e	enum:__anon2	file:
oHTTPDName	conf.c	/^    oHTTPDName,$/;"	e	enum:__anon2	file:
oHTTPDPassword	conf.c	/^    oHTTPDPassword,$/;"	e	enum:__anon2	file:
oHTTPDRealm	conf.c	/^    oHTTPDRealm,$/;"	e	enum:__anon2	file:
oHTTPDUsername	conf.c	/^    oHTTPDUsername,$/;"	e	enum:__anon2	file:
oHtmlMessageFile	conf.c	/^    oHtmlMessageFile,$/;"	e	enum:__anon2	file:
oPopularServers	conf.c	/^    oPopularServers,$/;"	e	enum:__anon2	file:
oProxyPort	conf.c	/^    oProxyPort,$/;"	e	enum:__anon2	file:
oSSLAllowedCipherList	conf.c	/^    oSSLAllowedCipherList,$/;"	e	enum:__anon2	file:
oSSLCertPath	conf.c	/^    oSSLCertPath,$/;"	e	enum:__anon2	file:
oSSLPeerVerification	conf.c	/^    oSSLPeerVerification,$/;"	e	enum:__anon2	file:
oSSLUseSNI	conf.c	/^    oSSLUseSNI,$/;"	e	enum:__anon2	file:
oSyslogFacility	conf.c	/^    oSyslogFacility,$/;"	e	enum:__anon2	file:
oTrustedIPList	conf.c	/^    oTrustedIPList,$/;"	e	enum:__anon2	file:
oTrustedMACList	conf.c	/^    oTrustedMACList,$/;"	e	enum:__anon2	file:
oTrustedWANHOSTList	conf.c	/^    oTrustedWANHOSTList,$/;"	e	enum:__anon2	file:
oWdctlSocket	conf.c	/^    oWdctlSocket,$/;"	e	enum:__anon2	file:
oldincludedir	Makefile	/^oldincludedir = \/usr\/include$/;"	m
opcode	conf.c	/^    OpCodes opcode;$/;"	m	struct:__anon3	file:
outgoing	client_hash.h	/^	unsigned long long outgoing;			\/**< @brief Outgoing data total*\/$/;"	m	struct:_t_counters
outgoing	client_list.h	/^    unsigned long long outgoing;        \/**< @brief Outgoing data total*\/$/;"	m	struct:_t_counters
outgoing	common.h	/^	int outgoing;$/;"	m	struct:client
outgoing_delta	client_hash.h	/^	unsigned long long outgoing_delta;		\/**< @brief Outgoing data after last report*\/$/;"	m	struct:_t_counters
outgoing_delta	client_list.h	/^    unsigned long long outgoing_delta;                    \/**< @brief Outgoing data after last report*\/$/;"	m	struct:_t_counters
outgoing_history	client_hash.h	/^	unsigned long long outgoing_history;	\/**< @brief Outgoing data before wifidog restarted*\/$/;"	m	struct:_t_counters
outgoing_history	client_list.h	/^    unsigned long long outgoing_history;        \/**< @brief Outgoing data before wifidog restarted*\/$/;"	m	struct:_t_counters
param	wdctl.h	/^    char *param;$/;"	m	struct:__anon6
parse_auth_server	conf.c	/^parse_auth_server(FILE * file, const char *filename, int *linenum)$/;"	f	file:
parse_black_ip_list	conf.c	/^parse_black_ip_list(const char *ptr)$/;"	f	file:
parse_black_mac_list	conf.c	/^parse_black_mac_list(const char *ptr)$/;"	f	file:
parse_black_wan_host_list	conf.c	/^parse_black_wan_host_list(const char *ptr)$/;"	f	file:
parse_boolean_value	conf.c	/^parse_boolean_value(char *line)$/;"	f	file:
parse_commandline	commandline.c	/^parse_commandline(int argc, char **argv)$/;"	f
parse_commandline	wdctl.c	/^parse_commandline(int argc, char **argv)$/;"	f
parse_firewall_ruleset	conf.c	/^parse_firewall_ruleset(const char *ruleset, FILE * file, const char *filename, int *linenum)$/;"	f	file:
parse_popular_servers	conf.c	/^parse_popular_servers(const char *ptr)$/;"	f	file:
parse_trusted_ip_list	conf.c	/^parse_trusted_ip_list(const char *ptr)$/;"	f	file:
parse_trusted_mac_list	conf.c	/^parse_trusted_mac_list(const char *ptr)$/;"	f	file:
parse_trusted_wan_host_list	conf.c	/^parse_trusted_wan_host_list(const char *ptr)$/;"	f	file:
pdfdir	Makefile	/^pdfdir = ${docdir}$/;"	m
pidfile	conf.h	/^    char *pidfile;                                      \/**< @brief pid file path of wifidog *\/$/;"	m	struct:__anon5
ping	ping_thread.c	/^ping(void)$/;"	f	file:
pkgdatadir	Makefile	/^pkgdatadir = $(datadir)\/wifidog$/;"	m
pkgincludedir	Makefile	/^pkgincludedir = $(includedir)\/wifidog$/;"	m
pkglibdir	Makefile	/^pkglibdir = $(libdir)\/wifidog$/;"	m
pkglibexecdir	Makefile	/^pkglibexecdir = $(libexecdir)\/wifidog$/;"	m
pong_got_ip_mac	ping_thread.c	/^pong_got_ip_mac(const char *res, int num, struct client *client)$/;"	f
popular_servers	conf.h	/^    t_popular_server *popular_servers;                  \/**< @brief list of popular servers *\/$/;"	m	struct:__anon5
port	conf.h	/^    char *port;                 \/**< @brief Port to block\/allow *\/$/;"	m	struct:_firewall_rule_t
prefix	Makefile	/^prefix = \/home\/jacky\/mt7620\/package\/pronetway\/wifidog-gateway-1.3.0$/;"	m
prev	uthash.h	/^	void *prev;						\/* prev element in app order      *\/$/;"	m	struct:ut_hash_handle
program_transform_name	Makefile	/^program_transform_name = s,x,x,$/;"	m
protocol	conf.h	/^    char *protocol;             \/**< @brief tcp, udp, etc ... *\/$/;"	m	struct:_firewall_rule_t
proxy_port	conf.h	/^    int proxy_port;                                     \/**< @brief Transparent proxy port (0 to disable) *\/$/;"	m	struct:__anon5
psdir	Makefile	/^psdir = ${docdir}$/;"	m
pstr	pstring.h	/^struct pstr {$/;"	s
pstr_append_sprintf	pstring.c	/^pstr_append_sprintf(pstr_t *pstr, const char *fmt, ...)$/;"	f
pstr_cat	pstring.c	/^pstr_cat(pstr_t *pstr, const char *string)$/;"	f
pstr_new	pstring.c	/^pstr_new(void)$/;"	f
pstr_t	pstring.h	/^typedef struct pstr pstr_t;  \/**< @brief pstr_t is a type for a struct pstr. *\/$/;"	t	typeref:struct:pstr
pstr_to_string	pstring.c	/^pstr_to_string(pstr_t *pstr)$/;"	f
rand16	util.c	/^rand16(void)$/;"	f	file:
register_fd_cleanup_on_fork	safe.c	/^register_fd_cleanup_on_fork(const int fd)$/;"	f
restart_orig_pid	commandline.c	/^pid_t restart_orig_pid = 0;$/;"	v
restartargv	commandline.c	/^char ** restartargv = NULL;$/;"	v
rtrim	str.c	/^char *rtrim(char *s)$/;"	f
rules	conf.h	/^    t_firewall_rule *rules;$/;"	m	struct:_firewall_ruleset_t
rulesets	conf.h	/^    t_firewall_ruleset *rulesets;                       \/**< @brief firewall rules *\/$/;"	m	struct:__anon5
s_config	conf.h	/^} s_config;$/;"	t	typeref:struct:__anon5
s_config	wdctl.h	/^} s_config;$/;"	t	typeref:struct:__anon6
safe_asprintf	safe.c	/^safe_asprintf(char **strp, const char *fmt, ...)$/;"	f
safe_fork	safe.c	/^safe_fork(void)$/;"	f
safe_malloc	safe.c	/^safe_malloc(size_t size)$/;"	f
safe_realloc	safe.c	/^safe_realloc(void *ptr, size_t newsize)$/;"	f
safe_strdup	safe.c	/^safe_strdup(const char *s)$/;"	f
safe_vasprintf	safe.c	/^safe_vasprintf(char **strp, const char *fmt, va_list ap)$/;"	f
save_pid_file	util.c	/^save_pid_file(const char *pf)$/;"	f
sbindir	Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
send_http_page	http.c	/^send_http_page(request * r, const char *title, const char *message)$/;"	f
send_request	wdctl.c	/^send_request(int sock, const char *request)$/;"	f	file:
served_this_session	wd_util.c	/^long served_this_session = 0;$/;"	v
sharedstatedir	Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sigchld_handler	gateway.c	/^sigchld_handler(int s)$/;"	f
signature	uthash.h	/^	uint32_t signature;		\/* used only to find hash tables in external analysis *\/$/;"	m	struct:ut_hash_table
size	pstring.h	/^    size_t size; \/**< @brief Current maximum size of the buffer. *\/$/;"	m	struct:pstr
socket	wdctl.h	/^    char *socket;$/;"	m	struct:__anon6
srcdir	Makefile	/^srcdir = .$/;"	m
ssl_certs	conf.h	/^    char *ssl_certs;                                    \/**< @brief Path to SSL certs for auth server verification *\/$/;"	m	struct:__anon5
ssl_cipher_list	conf.h	/^    char *ssl_cipher_list;                              \/**< @brief List of SSL ciphers allowed. Optional. *\/$/;"	m	struct:__anon5
ssl_use_sni	conf.h	/^    int ssl_use_sni;                                    \/**< @brief boolean, whether to enable auth server for server name indication, the TLS extension *\/$/;"	m	struct:__anon5
ssl_verify	conf.h	/^    int ssl_verify;                                     \/**< @brief boolean, whether to enable auth server certificate verification *\/$/;"	m	struct:__anon5
started_time	gateway.c	/^time_t started_time = 0;$/;"	v
streq	str.c	/^int streq(const char *a, const char *b)$/;"	f
strlower	str.c	/^char *strlower(char *str)$/;"	f
strupper	str.c	/^char *strupper(char *str)$/;"	f
subdir	Makefile	/^subdir = src$/;"	m
sysconfdir	Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
syslog_facility	debug.h	/^    int syslog_facility; \/**< @brief facility to use when using syslog for logging *\/$/;"	m	struct:_debug_conf
t_auth_serv	conf.h	/^} t_auth_serv;$/;"	t	typeref:struct:_auth_serv_t
t_authcode	auth.h	/^} t_authcode;$/;"	t	typeref:enum:__anon1
t_authresponse	auth.h	/^} t_authresponse;$/;"	t	typeref:struct:_t_authresponse
t_client	client_hash.h	/^} t_client;$/;"	t	typeref:struct:_t_client
t_client	client_list.h	/^} t_client;$/;"	t	typeref:struct:_t_client
t_counters	client_hash.h	/^} t_counters;$/;"	t	typeref:struct:_t_counters
t_counters	client_list.h	/^} t_counters;$/;"	t	typeref:struct:_t_counters
t_firewall_rule	conf.h	/^} t_firewall_rule;$/;"	t	typeref:struct:_firewall_rule_t
t_firewall_ruleset	conf.h	/^} t_firewall_ruleset;$/;"	t	typeref:struct:_firewall_ruleset_t
t_firewall_target	conf.h	/^} t_firewall_target;$/;"	t	typeref:enum:__anon4
t_fw_marks	firewall.h	/^} t_fw_marks;$/;"	t	typeref:enum:_t_fw_marks
t_popular_server	conf.h	/^} t_popular_server;$/;"	t	typeref:struct:_popular_server_t
t_trusted_or_black_ip	conf.h	/^} t_trusted_or_black_ip;$/;"	t	typeref:struct:_trusted_or_black_ip_t
t_trusted_or_black_mac	conf.h	/^} t_trusted_or_black_mac;$/;"	t	typeref:struct:_trusted_or_black_mac_t
t_trusted_or_black_wan_host	conf.h	/^} t_trusted_or_black_wan_host;$/;"	t	typeref:struct:_trusted_or_black_wan_host_t
tail	uthash.h	/^	struct ut_hash_handle *tail;	\/* tail hh in app order, for fast append *\/$/;"	m	struct:ut_hash_table	typeref:struct:ut_hash_table::ut_hash_handle
target	conf.h	/^    t_firewall_target target;   \/**< @brief t_firewall_target *\/$/;"	m	struct:_firewall_rule_t
target_alias	Makefile	/^target_alias = $/;"	m
tbl	uthash.h	/^	struct ut_hash_table *tbl;$/;"	m	struct:ut_hash_handle	typeref:struct:ut_hash_handle::ut_hash_table
termination_handler	gateway.c	/^termination_handler(int s)$/;"	f
thread_client_timeout_check	auth.c	/^thread_client_timeout_check(const void *arg)$/;"	f
thread_httpd	httpd_thread.c	/^thread_httpd(void *args)$/;"	f
thread_ping	ping_thread.c	/^thread_ping(void *arg)$/;"	f
thread_wdctl	wdctl_thread.c	/^thread_wdctl(void *arg)$/;"	f
thread_wdctl_handler	wdctl_thread.c	/^thread_wdctl_handler(void *arg)$/;"	f	file:
tid_fw_counter	gateway.c	/^static pthread_t tid_fw_counter = 0;$/;"	v	file:
tid_ping	gateway.c	/^static pthread_t tid_ping = 0;$/;"	v	file:
token	client_hash.h	/^	char *token;							\/**< @brief Client token *\/$/;"	m	struct:_t_client
token	client_list.h	/^    char *token;                        \/**< @brief Client token *\/$/;"	m	struct:_t_client
token	common.h	/^	char token[20];$/;"	m	struct:client
top_build_prefix	Makefile	/^top_build_prefix = ..\/$/;"	m
top_builddir	Makefile	/^top_builddir = ..$/;"	m
top_srcdir	Makefile	/^top_srcdir = ..$/;"	m
transform	Makefile	/^transform = $(program_transform_name)$/;"	m
trim	str.c	/^char *trim(char *s)$/;"	f
trustediplist	conf.h	/^    t_trusted_or_black_ip *trustediplist;               \/**< @brief list of trusted ips *\/$/;"	m	struct:__anon5
trustedmaclist	conf.h	/^    t_trusted_or_black_mac *trustedmaclist;             \/**< @brief list of trusted macs *\/$/;"	m	struct:__anon5
trustedwanhostlist	conf.h	/^    t_trusted_or_black_wan_host *trustedwanhostlist;    \/**< @brief list of trusted wan hosts *\/$/;"	m	struct:__anon5
uint32_t	uthash.h	/^typedef unsigned int uint32_t;$/;"	t
uint8_t	uthash.h	/^typedef unsigned char uint8_t;$/;"	t
usage	commandline.c	/^usage(void)$/;"	f	file:
usage	wdctl.c	/^usage(void)$/;"	f	file:
ut_hash_handle	uthash.h	/^typedef struct ut_hash_handle {$/;"	s
ut_hash_handle	uthash.h	/^} ut_hash_handle;$/;"	t	typeref:struct:ut_hash_handle
ut_hash_table	uthash.h	/^typedef struct ut_hash_table {$/;"	s
ut_hash_table	uthash.h	/^} ut_hash_table;$/;"	t	typeref:struct:ut_hash_table
uthash_expand_fyi	uthash.h	96;"	d
uthash_fatal	uthash.h	83;"	d
uthash_free	uthash.h	89;"	d
uthash_malloc	uthash.h	86;"	d
uthash_noexpand_fyi	uthash.h	93;"	d
validate_popular_servers	conf.c	/^validate_popular_servers(void)$/;"	f	file:
wd_gethostbyname	util.c	/^wd_gethostbyname(const char *name)$/;"	f
wdctl_DEPENDENCIES	Makefile	/^wdctl_DEPENDENCIES = libgateway.a$/;"	m
wdctl_LDADD	Makefile	/^wdctl_LDADD = libgateway.a$/;"	m
wdctl_OBJECTS	Makefile	/^wdctl_OBJECTS = $(am_wdctl_OBJECTS)$/;"	m
wdctl_SOURCES	Makefile	/^wdctl_SOURCES = wdctl.c$/;"	m
wdctl_reset	wdctl.c	/^wdctl_reset(void)$/;"	f
wdctl_reset	wdctl_thread.c	/^wdctl_reset(int fd, const char *arg)$/;"	f	file:
wdctl_restart	wdctl.c	/^wdctl_restart(void)$/;"	f	file:
wdctl_restart	wdctl_thread.c	/^wdctl_restart(int afd)$/;"	f	file:
wdctl_sock	conf.h	/^    char *wdctl_sock;                                   \/**< @brief wdctl path to socket *\/$/;"	m	struct:__anon5
wdctl_socket_server	wdctl_thread.c	/^static int wdctl_socket_server;$/;"	v	file:
wdctl_status	wdctl.c	/^wdctl_status(void)$/;"	f	file:
wdctl_status	wdctl_thread.c	/^wdctl_status(int fd)$/;"	f	file:
wdctl_stop	wdctl.c	/^wdctl_stop(void)$/;"	f	file:
wdctl_stop	wdctl_thread.c	/^wdctl_stop(int fd)$/;"	f	file:
webserver	gateway.c	/^httpd * webserver = NULL;$/;"	v
wifidog_DEPENDENCIES	Makefile	/^wifidog_DEPENDENCIES = libgateway.a \\$/;"	m
wifidog_LDADD	Makefile	/^wifidog_LDADD = libgateway.a $(top_builddir)\/libhttpd\/libhttpd.la$/;"	m
wifidog_OBJECTS	Makefile	/^wifidog_OBJECTS = $(am_wifidog_OBJECTS)$/;"	m
wifidog_SOURCES	Makefile	/^wifidog_SOURCES = main.c$/;"	m
wifidog_cfg_version	firewall.c	/^int wifidog_cfg_version = 1;$/;"	v
write_config_file	ping_thread.c	/^void write_config_file(const char *trustedmaclist, const char *trustediplist, const char *trustedwanhostlist,$/;"	f
write_to_socket	wdctl_thread.c	/^write_to_socket(int fd, char *text, size_t len)$/;"	f	file:
